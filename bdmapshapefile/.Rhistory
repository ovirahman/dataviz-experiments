getwd()
plot(iris)
plot(iris)
head(iris)
fit <- lm(Sepal.Length~Species, iris)
fi
fit
plot(fit)
plot(fit)
units()
unit
install.packages("tidyverse")
library()
library(ggplot2)
qplot(Sepal.Length, Sepal.Width, iris)
qplot(Sepal.Length, Sepal.Width, data = iris)
theme_set(theme_classic())
qplot(Sepal.Length, Sepal.Width, data = iris)
qplot(Sepal.Length, Sepal.Width, data = iris) + theme_bw()
qplot(Sepal.Length, Sepal.Width, data = iris) + theme_tufte()
ggthemes
install.packages(ggthemes)
install.packages("ggthemes")
library(ggthemes)
qplot(Sepal.Length, Sepal.Width, data = iris) + ggthemes::bank_slopes()
qplot(Sepal.Length, Sepal.Width, data = iris) + ggthemes::canva_pal()
qplot(Sepal.Length, Sepal.Width, data = iris) + canva_pal()
qplot(Sepal.Length, Sepal.Width, data = iris) + canva_pal
qplot(Sepal.Length, Sepal.Width, data = iris) +ggthemes::theme_clean()
qplot(Sepal.Length, Sepal.Width, data = iris) +ggthemes::theme_excel()
qplot(Sepal.Length, Sepal.Width, data = iris) +ggthemes::theme_tufte()
qplot(Sepal.Length, Sepal.Width, data = iris, color = Species) +ggthemes::theme_tufte()
qplot(Sepal.Length, Sepal.Width, data = iris, color = Species)
qplot(Sepal.Length, Sepal.Width, data = iris, color = Species) +ggthemes::theme_tufte()
qplot(Sepal.Length, Sepal.Width, data = iris, color = Species)
qplot(Sepal.Length, Sepal.Width, data = iris, color = Species) + theme_fivethirtyeight()
qplot(Sepal.Length, Sepal.Width, data = iris, color = Species) + theme_wsj()
theme_wsj
colorhex
ggthemes::ggthemes_data$wsj$bg[color]
ggthemes::ggthemes_data$wsj$bg
# Add column with unique ids (don't need to change)
iris$Flower <- 1:nrow(iris)
# Fill in the ___ to produce to the correct iris.wide dataset
iris.wide <- iris %>%
gather(key, value, -Species, -Flower) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
library(tidyr)
library(tidyverse)
# Add column with unique ids (don't need to change)
iris$Flower <- 1:nrow(iris)
# Fill in the ___ to produce to the correct iris.wide dataset
iris.wide <- iris %>%
gather(key, value, -Species, -Flower) %>%
separate(key, c("Part", "Measure"), "\\.") %>%
spread(Measure, value)
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_point()
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter()
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)
ggplot(iris.wide, aes(Length, Width, ccolorol = Part))+
geom_jitter(alpha = 0.7)
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)+
scale_color_brewer(pallete = "Set1")
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)+
scale_color_brewer(palette = "Set1")
ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)+
scale_color_brewer(palette = "Set1")+
coord_fixed()
p<- ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)+
scale_color_brewer(palette = "Set1")+
coord_fixed()
p + facet_grid()
p + facet_grid(Species)
p + facet_grid(~Species)
vars
p + facet_grid(.~Species)
p + facet_grid(cols = ~Species)
p + facet_grid(cols = vars(Species))
.
theme_set(theme_classic())
p<- ggplot(iris.wide, aes(Length, Width, color = Part))+
geom_jitter(alpha = 0.7)+
scale_color_brewer(palette = "Set1")+
coord_fixed()
p + facet_grid(.~Species)
setwd("~/Desktop/GitHub/dataviz-experiments/dataviz-experiments/bdmapshapefile")
library(sf)
library(tmap)
library(tmaptools)
library(leaflet)
library(dplyr)
map_dist <- st_read("gadm36_BGD_shp/gadm36_BGD_2.shp")
district <- read.csv("Districts.csv")
district <- data.frame(District = district$District, Density = district$Pop.Density.in.2011)
district$District <- gsub(" District","",district$District)
district <- data.frame(NAME_2 = district$District, Population_Density = district$Density)
map_and_data <- inner_join(map_dist, district)
data<- readxl::read_excel("COVID-19.xlsx", skip = 1)
covi19map <- inner_join(map_dist, data, by = c("NAME_2" = "Distirct"))
tmap_mode("plot")
map <- tm_shape(covi19map) +
tm_polygons("Confirmed_Cases",id = "NAME_2",palette = "Reds",style = "log10_pretty", title = "Confirmed Cases") +
tm_style("cobalt")+
tm_layout(
"Bangladesh\nCovid-19: District Wise Situation (16.10.20)\nSource: IEDCR",
title.position = c("left", "bottom"),
legend.position = c("right", "top")
)
map
tmap_leaflet(map) %>% addControl("Bangladesh<br>Covid-19: District Wise Situation (16.10.20)<br>Source: IEDCR", position = "bottomleft")
#tmap_mode("view")
library(sf)
library(tmap)
library(tmaptools)
library(leaflet)
library(dplyr)
library(readxl)
#district level map shapefile data
map_dist <- st_read("gadm36_BGD_shp/gadm36_BGD_2.shp")
#covid19 data for 10 october
data<- readxl::read_excel("COVID-19.xlsx", skip = 1)
# map and data joined
covi19map <- inner_join(map_dist, data, by = c("NAME_2" = "Distirct"))
# map mode to static mode
tmap_mode("plot")
#defining and styling the map
map <- tm_shape(covi19map) +
tm_polygons("Confirmed_Cases",id = "NAME_2",palette = "Reds",style = "log10_pretty", title = "Confirmed Cases") +
tm_style("cobalt")+
tm_layout(
"Bangladesh\nCovid-19: District Wise Situation (16.10.20)\nSource: IEDCR",
title.position = c("left", "bottom"),
legend.position = c("right", "top")
)
# plotting the map
map
#converting it to an interactive leaflet map
tmap_leaflet(map) %>%
addControl("Bangladesh<br>Covid-19: District Wise Situation (16.10.20)<br>Source: IEDCR", position = "bottomleft")
