str(data)
sum(data$x)
data$y <- letters[1:9]
data$y <- letters[1:50]
str(data)
data$y <- factor(data$y)
str(data)
pacman::p_load(BBmisc, tidyverse, hablar, ggbump, sf, rnaturalearth, feather, janitor, lubridate)
options(stringsAsFactors = F)
set_wd_to_script_path()
gdpr_violations <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv')
df <- gdpr_violations %>%
group_by(name) %>%
summarise(price = sum_(price)) %>%
ungroup()
sdf <- rnaturalearthdata::countries50 %>%
st_as_sf() %>%
st_crop(xmin = -24, xmax = 31, ymin = 33, ymax = 73) %>%
filter(admin %in% df$name) %>%
left_join(df, by = c("admin" = "name")) %>%
mutate(price_cap  = price / pop_est,
admin = case_when(admin == "United Kingdom" ~ "UK",
admin == "Czech Republic" ~ "Czech",
T ~ admin))
ranking <- st_geometry(sdf) %>%
st_point_on_surface() %>%
st_coordinates() %>%
as_tibble() %>%
bind_cols(tibble(fine_cap = normalize(rank(sdf$price_cap), range = c(40.12161, 66.12161), method = "range"),
country = sdf$admin,
xend = 60,
x_axis_start = xend + 10,
fine_cap_x = normalize(sdf$price_cap, range = c(first(x_axis_start), 100), method = "range"),
val_txt = paste0(format(sdf$price_cap, digits = 0, nsmall = 2)),
val_txt2 = if_else(country == "Austria", paste0(val_txt, "€ per capita"), val_txt)))
sdf <- sdf %>%
bind_cols(ranking %>% select(fine_cap))
ggplot() +
geom_sf(data = sdf, size = .3, fill = "transparent", color = "gray17") +
# Sigmoid from country to start of barchart
geom_sigmoid(data = ranking,
aes(x = X, y = Y, xend = x_axis_start - .2, yend = fine_cap, group = country, color = fine_cap),
alpha = .6, smooth = 10, size = 1) +
# Line from xstart to value
geom_segment(data = ranking,
aes(x = x_axis_start, y = fine_cap, xend = fine_cap_x, yend = fine_cap, color = fine_cap), alpha = .6, size = 1,
lineend = "round") +
# Y axis - black line
geom_segment(data = ranking,
aes(x = x_axis_start, y = 40, xend = x_axis_start, yend = 67), alpha = .6, size = 1.3, color = "black") +
# dot on centroid of country in map
geom_point(data = ranking,
aes(x = X, y = Y, color = fine_cap), size = 2) +
# Country text
geom_text(data = ranking, aes(x = x_axis_start-.5, y = fine_cap, label = country, color = fine_cap), hjust = 1, size = 2.5, nudge_y = .5) +
# Value text
geom_text(data = ranking, aes(x = fine_cap_x, y = fine_cap, label = val_txt2, color = fine_cap), hjust = 0, size = 2, nudge_x = .4) +
coord_sf(clip = "off") +
scale_fill_viridis_c() +
scale_color_viridis_c() +
theme_void() +
labs(title = "GDPR fines per capita",
subtitle = str_wrap("The General Data Protection Regulation (EU) 2016/679 (GDPR) is a regulation in EU law on data protection and privacy in the European Union (EU) and the European Economic Area (EEA).", 100),
caption = "Source: TidyTuesday & Wikipedia") +
theme(plot.margin = margin(.5, 1, .5, .5, "cm"),
legend.position = "none",
plot.background = element_rect(fill = "black"),
plot.caption = element_text(color = "gray40"),
plot.title = element_text(color = "gray40", size = 16, family = "Helvetica", face = "bold"),
plot.subtitle = element_text(color = "gray40", size = 8))
ggsave("ranking_gdpr.png", dpi = 1000)
library(ggplot2)
library(dplyr)
pacman::p_load(BBmisc, tidyverse, hablar, ggbump, sf, rnaturalearth, feather, janitor, lubridate)
options(stringsAsFactors = F)
set_wd_to_script_path()
gdpr_violations <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv')
df <- gdpr_violations %>%
group_by(name) %>%
summarise(price = sum_(price)) %>%
ungroup()
sdf <- rnaturalearthdata::countries50 %>%
st_as_sf() %>%
st_crop(xmin = -24, xmax = 31, ymin = 33, ymax = 73) %>%
filter(admin %in% df$name) %>%
left_join(df, by = c("admin" = "name")) %>%
mutate(price_cap  = price / pop_est,
admin = case_when(admin == "United Kingdom" ~ "UK",
admin == "Czech Republic" ~ "Czech",
T ~ admin))
ranking <- st_geometry(sdf) %>%
st_point_on_surface() %>%
st_coordinates() %>%
as_tibble() %>%
bind_cols(tibble(fine_cap = normalize(rank(sdf$price_cap), range = c(40.12161, 66.12161), method = "range"),
country = sdf$admin,
xend = 60,
x_axis_start = xend + 10,
fine_cap_x = normalize(sdf$price_cap, range = c(first(x_axis_start), 100), method = "range"),
val_txt = paste0(format(sdf$price_cap, digits = 0, nsmall = 2)),
val_txt2 = if_else(country == "Austria", paste0(val_txt, "€ per capita"), val_txt)))
sdf <- sdf %>%
bind_cols(ranking %>% select(fine_cap))
ggplot() +
geom_sf(data = sdf, size = .3, fill = "transparent", color = "gray17") +
# Sigmoid from country to start of barchart
geom_sigmoid(data = ranking,
aes(x = X, y = Y, xend = x_axis_start - .2, yend = fine_cap, group = country, color = fine_cap),
alpha = .6, smooth = 10, size = 1) +
# Line from xstart to value
geom_segment(data = ranking,
aes(x = x_axis_start, y = fine_cap, xend = fine_cap_x, yend = fine_cap, color = fine_cap), alpha = .6, size = 1,
lineend = "round") +
# Y axis - black line
geom_segment(data = ranking,
aes(x = x_axis_start, y = 40, xend = x_axis_start, yend = 67), alpha = .6, size = 1.3, color = "black") +
# dot on centroid of country in map
geom_point(data = ranking,
aes(x = X, y = Y, color = fine_cap), size = 2) +
# Country text
geom_text(data = ranking, aes(x = x_axis_start-.5, y = fine_cap, label = country, color = fine_cap), hjust = 1, size = 2.5, nudge_y = .5) +
# Value text
geom_text(data = ranking, aes(x = fine_cap_x, y = fine_cap, label = val_txt2, color = fine_cap), hjust = 0, size = 2, nudge_x = .4) +
coord_sf(clip = "off") +
scale_fill_viridis_c() +
scale_color_viridis_c() +
theme_void() +
labs(title = "GDPR fines per capita",
subtitle = str_wrap("The General Data Protection Regulation (EU) 2016/679 (GDPR) is a regulation in EU law on data protection and privacy in the European Union (EU) and the European Economic Area (EEA).", 100),
caption = "Source: TidyTuesday & Wikipedia") +
theme(plot.margin = margin(.5, 1, .5, .5, "cm"),
legend.position = "none",
plot.background = element_rect(fill = "black"),
plot.caption = element_text(color = "gray40"),
plot.title = element_text(color = "gray40", size = 16, family = "Helvetica", face = "bold"),
plot.subtitle = element_text(color = "gray40", size = 8))
ggsave("ranking_gdpr.png", dpi = 1000)
library(sp)
pacman::p_load(BBmisc, tidyverse, hablar, ggbump, sf, rnaturalearth, feather, janitor, lubridate)
options(stringsAsFactors = F)
set_wd_to_script_path()
gdpr_violations <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv')
df <- gdpr_violations %>%
group_by(name) %>%
summarise(price = sum_(price)) %>%
ungroup()
sdf <- rnaturalearthdata::countries50 %>%
st_as_sf() %>%
st_crop(xmin = -24, xmax = 31, ymin = 33, ymax = 73) %>%
filter(admin %in% df$name) %>%
left_join(df, by = c("admin" = "name")) %>%
mutate(price_cap  = price / pop_est,
admin = case_when(admin == "United Kingdom" ~ "UK",
admin == "Czech Republic" ~ "Czech",
T ~ admin))
ranking <- st_geometry(sdf) %>%
st_point_on_surface() %>%
st_coordinates() %>%
as_tibble() %>%
bind_cols(tibble(fine_cap = normalize(rank(sdf$price_cap), range = c(40.12161, 66.12161), method = "range"),
country = sdf$admin,
xend = 60,
x_axis_start = xend + 10,
fine_cap_x = normalize(sdf$price_cap, range = c(first(x_axis_start), 100), method = "range"),
val_txt = paste0(format(sdf$price_cap, digits = 0, nsmall = 2)),
val_txt2 = if_else(country == "Austria", paste0(val_txt, "€ per capita"), val_txt)))
sdf <- sdf %>%
bind_cols(ranking %>% select(fine_cap))
ggplot() +
geom_sf(data = sdf, size = .3, fill = "transparent", color = "gray17") +
# Sigmoid from country to start of barchart
geom_sigmoid(data = ranking,
aes(x = X, y = Y, xend = x_axis_start - .2, yend = fine_cap, group = country, color = fine_cap),
alpha = .6, smooth = 10, size = 1) +
# Line from xstart to value
geom_segment(data = ranking,
aes(x = x_axis_start, y = fine_cap, xend = fine_cap_x, yend = fine_cap, color = fine_cap), alpha = .6, size = 1,
lineend = "round") +
# Y axis - black line
geom_segment(data = ranking,
aes(x = x_axis_start, y = 40, xend = x_axis_start, yend = 67), alpha = .6, size = 1.3, color = "black") +
# dot on centroid of country in map
geom_point(data = ranking,
aes(x = X, y = Y, color = fine_cap), size = 2) +
# Country text
geom_text(data = ranking, aes(x = x_axis_start-.5, y = fine_cap, label = country, color = fine_cap), hjust = 1, size = 2.5, nudge_y = .5) +
# Value text
geom_text(data = ranking, aes(x = fine_cap_x, y = fine_cap, label = val_txt2, color = fine_cap), hjust = 0, size = 2, nudge_x = .4) +
coord_sf(clip = "off") +
scale_fill_viridis_c() +
scale_color_viridis_c() +
theme_void() +
labs(title = "GDPR fines per capita",
subtitle = str_wrap("The General Data Protection Regulation (EU) 2016/679 (GDPR) is a regulation in EU law on data protection and privacy in the European Union (EU) and the European Economic Area (EEA).", 100),
caption = "Source: TidyTuesday & Wikipedia") +
theme(plot.margin = margin(.5, 1, .5, .5, "cm"),
legend.position = "none",
plot.background = element_rect(fill = "black"),
plot.caption = element_text(color = "gray40"),
plot.title = element_text(color = "gray40", size = 16, family = "Helvetica", face = "bold"),
plot.subtitle = element_text(color = "gray40", size = 8))
ggsave("ranking_gdpr.png", dpi = 1000)
library(sf)
text(1,-5, label = "-5 MILLION" , cex = 1.3)
pacman::p_load(BBmisc, tidyverse, hablar, ggbump, sf, rnaturalearth, feather, janitor, lubridate)
options(stringsAsFactors = F)
set_wd_to_script_path()
gdpr_violations <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv')
df <- gdpr_violations %>%
group_by(name) %>%
summarise(price = sum_(price)) %>%
ungroup()
sdf <- rnaturalearthdata::countries50 %>%
st_as_sf() %>%
st_crop(xmin = -24, xmax = 31, ymin = 33, ymax = 73) %>%
filter(admin %in% df$name) %>%
left_join(df, by = c("admin" = "name")) %>%
mutate(price_cap  = price / pop_est,
admin = case_when(admin == "United Kingdom" ~ "UK",
admin == "Czech Republic" ~ "Czech",
T ~ admin))
ranking <- st_geometry(sdf) %>%
st_point_on_surface() %>%
st_coordinates() %>%
as_tibble() %>%
bind_cols(tibble(fine_cap = normalize(rank(sdf$price_cap), range = c(40.12161, 66.12161), method = "range"),
country = sdf$admin,
xend = 60,
x_axis_start = xend + 10,
fine_cap_x = normalize(sdf$price_cap, range = c(first(x_axis_start), 100), method = "range"),
val_txt = paste0(format(sdf$price_cap, digits = 0, nsmall = 2)),
val_txt2 = if_else(country == "Austria", paste0(val_txt, "€ per capita"), val_txt)))
sdf <- sdf %>%
bind_cols(ranking %>% select(fine_cap))
ggplot() +
geom_sf(data = sdf, size = .3, fill = "transparent", color = "gray17") +
# Sigmoid from country to start of barchart
geom_sigmoid(data = ranking,
aes(x = X, y = Y, xend = x_axis_start - .2, yend = fine_cap, group = country, color = fine_cap),
alpha = .6, smooth = 10, size = 1) +
# Line from xstart to value
geom_segment(data = ranking,
aes(x = x_axis_start, y = fine_cap, xend = fine_cap_x, yend = fine_cap, color = fine_cap), alpha = .6, size = 1,
lineend = "round") +
# Y axis - black line
geom_segment(data = ranking,
aes(x = x_axis_start, y = 40, xend = x_axis_start, yend = 67), alpha = .6, size = 1.3, color = "black") +
# dot on centroid of country in map
geom_point(data = ranking,
aes(x = X, y = Y, color = fine_cap), size = 2) +
# Country text
geom_text(data = ranking, aes(x = x_axis_start-.5, y = fine_cap, label = country, color = fine_cap), hjust = 1, size = 2.5, nudge_y = .5) +
# Value text
geom_text(data = ranking, aes(x = fine_cap_x, y = fine_cap, label = val_txt2, color = fine_cap), hjust = 0, size = 2, nudge_x = .4) +
coord_sf(clip = "off") +
scale_fill_viridis_c() +
scale_color_viridis_c() +
theme_void() +
labs(title = "GDPR fines per capita",
subtitle = str_wrap("The General Data Protection Regulation (EU) 2016/679 (GDPR) is a regulation in EU law on data protection and privacy in the European Union (EU) and the European Economic Area (EEA).", 100),
caption = "Source: TidyTuesday & Wikipedia") +
theme(plot.margin = margin(.5, 1, .5, .5, "cm"),
legend.position = "none",
plot.background = element_rect(fill = "black"),
plot.caption = element_text(color = "gray40"),
plot.title = element_text(color = "gray40", size = 16, family = "Helvetica", face = "bold"),
plot.subtitle = element_text(color = "gray40", size = 8))
ggsave("ranking_gdpr.png", dpi = 1000)
library(pacman)
install.packages(pacman)
install.packages(pacman)
install.packages("pacman")
pacman::p_load(BBmisc, tidyverse, hablar, ggbump, sf, rnaturalearth, feather, janitor, lubridate)
options(stringsAsFactors = F)
set_wd_to_script_path()
gdpr_violations <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-04-21/gdpr_violations.tsv')
df <- gdpr_violations %>%
group_by(name) %>%
summarise(price = sum_(price)) %>%
ungroup()
sdf <- rnaturalearthdata::countries50 %>%
st_as_sf() %>%
st_crop(xmin = -24, xmax = 31, ymin = 33, ymax = 73) %>%
filter(admin %in% df$name) %>%
left_join(df, by = c("admin" = "name")) %>%
mutate(price_cap  = price / pop_est,
admin = case_when(admin == "United Kingdom" ~ "UK",
admin == "Czech Republic" ~ "Czech",
T ~ admin))
ranking <- st_geometry(sdf) %>%
st_point_on_surface() %>%
st_coordinates() %>%
as_tibble() %>%
bind_cols(tibble(fine_cap = normalize(rank(sdf$price_cap), range = c(40.12161, 66.12161), method = "range"),
country = sdf$admin,
xend = 60,
x_axis_start = xend + 10,
fine_cap_x = normalize(sdf$price_cap, range = c(first(x_axis_start), 100), method = "range"),
val_txt = paste0(format(sdf$price_cap, digits = 0, nsmall = 2)),
val_txt2 = if_else(country == "Austria", paste0(val_txt, "€ per capita"), val_txt)))
sdf <- sdf %>%
bind_cols(ranking %>% select(fine_cap))
ggplot() +
geom_sf(data = sdf, size = .3, fill = "transparent", color = "gray17") +
# Sigmoid from country to start of barchart
geom_sigmoid(data = ranking,
aes(x = X, y = Y, xend = x_axis_start - .2, yend = fine_cap, group = country, color = fine_cap),
alpha = .6, smooth = 10, size = 1) +
# Line from xstart to value
geom_segment(data = ranking,
aes(x = x_axis_start, y = fine_cap, xend = fine_cap_x, yend = fine_cap, color = fine_cap), alpha = .6, size = 1,
lineend = "round") +
# Y axis - black line
geom_segment(data = ranking,
aes(x = x_axis_start, y = 40, xend = x_axis_start, yend = 67), alpha = .6, size = 1.3, color = "black") +
# dot on centroid of country in map
geom_point(data = ranking,
aes(x = X, y = Y, color = fine_cap), size = 2) +
# Country text
geom_text(data = ranking, aes(x = x_axis_start-.5, y = fine_cap, label = country, color = fine_cap), hjust = 1, size = 2.5, nudge_y = .5) +
# Value text
geom_text(data = ranking, aes(x = fine_cap_x, y = fine_cap, label = val_txt2, color = fine_cap), hjust = 0, size = 2, nudge_x = .4) +
coord_sf(clip = "off") +
scale_fill_viridis_c() +
scale_color_viridis_c() +
theme_void() +
labs(title = "GDPR fines per capita",
subtitle = str_wrap("The General Data Protection Regulation (EU) 2016/679 (GDPR) is a regulation in EU law on data protection and privacy in the European Union (EU) and the European Economic Area (EEA).", 100),
caption = "Source: TidyTuesday & Wikipedia") +
theme(plot.margin = margin(.5, 1, .5, .5, "cm"),
legend.position = "none",
plot.background = element_rect(fill = "black"),
plot.caption = element_text(color = "gray40"),
plot.title = element_text(color = "gray40", size = 16, family = "Helvetica", face = "bold"),
plot.subtitle = element_text(color = "gray40", size = 8))
ggsave("ranking_gdpr.png", dpi = 1000)
install.packages("COVID19")
library(COVID19)
COVID19::covid19()
library(readxl)
setwd("C:/Users/movir/Desktop/workspace/GITHUB/dataviz-experiments")
data <- read_excel("COVID-19.xlsx",skip = 1)
data
library(sf)
library(tmap)
library(tmaptools)
library(leaflet)
library(dplyr)
map<-st_read("gadm36_BGD_shp/gadm36_BGD_1.shp")
data<- read.csv("population.csv")
data <- data.frame(NAME_1 = data$Division, Population = data$Population)
data$Population <- gsub(",","", data$Population)
data$Population <- as.numeric(data$Population)
mapanddata<- inner_join(map,data)
tm_shape(mapanddata) + tm_polygons("Population",palette = "Greens")
data <- read_excel("COVID-19.xlsx",skip = 1)
data
map_dist <- st_read("gadm36_BGD_shp/gadm36_BGD_2.shp")
setwd("C:/Users/movir/Desktop/workspace/GITHUB/dataviz-experiments/bdmapshapefile")
map<-st_read("gadm36_BGD_shp/gadm36_BGD_1.shp")
data<- read.csv("population.csv")
data <- data.frame(NAME_1 = data$Division, Population = data$Population)
data$Population <- gsub(",","", data$Population)
data$Population <- as.numeric(data$Population)
mapanddata<- inner_join(map,data)
tm_shape(mapanddata) + tm_polygons("Population",palette = "Greens")
data
names(map)
levels(map)
map
tm_shape(mapanddata) + tm_polygons("Population",palette = "Reds")
data
data<- read.csv("population.csv")
data
mapanddata<- inner_join(map,data, by = c("NAME_1", "Division"))
data
mapanddata<- left_join(map,data, by = c("NAME_1", "Division"))
mapanddata<- inner_join(map,data, by = c("NAME_1", "Division"))
mapanddata<- inner_join(map,data, by = c("Division","NAME_1" ))
map
mapanddata<- inner_join(map,data, by.x = "NAME_1", by.y = "Division")
?inner_join
mapanddata<- inner_join(map,data, by = c("NAME_1" = "Division"))
tm_shape(mapanddata) + tm_polygons("Population",palette = "Reds")
mapanddata
data
data$Population <- gsub(",","", data$Population)
data$Population <- as.numeric(data$Population)
data
mapanddata<- inner_join(map,data, by = c("NAME_1" = "Division"))
tm_shape(mapanddata) + tm_polygons("Population",palette = "Reds")
map<-st_read("bgd_admbnda_adm1_bbs_20180410/bgd_admbnda_adm1_bbs_20180410.shp")
map
mapanddata<- inner_join(map,data, by = c("ADM1_EN" = "Division"))
tm_shape(mapanddata) + tm_polygons("Population",palette = "Reds")
tmap_mode("view")
map<-st_read("bgd_admbnda_adm1_bbs_20180410/bgd_admbnda_adm1_bbs_20180410.shp")
data<- read.csv("population.csv")
#data <- data.frame(NAME_1 = data$Division, Population = data$Population)
data$Population <- gsub(",","", data$Population)
data$Population <- as.numeric(data$Population)
mapanddata<- inner_join(map,data, by = c("ADM1_EN" = "Division"))
tm_shape(mapanddata) + tm_polygons("Population",palette = "Reds")
tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds")
data$Density <- as.numeric(data$Density)
mapanddata<- inner_join(map,data, by = c("ADM1_EN" = "Division"))
tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds")
data
data<- read.csv("population.csv")
data
data$Density <- gsub(",","", data$Density)
data$Population <- as.numeric(data$Population)
data$Density <- as.numeric(data$Density)
mapanddata<- inner_join(map,data, by = c("ADM1_EN" = "Division"))
tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds")
library(leaflet)
library(dplyr)
library(htmltools)
library(htmlwidgets)
#Reading in the data
sylhet <- read.csv("sylhet_uni.csv")
#correcting variable names
names(sylhet) <- c("Name","Type", "lat", "lon", "Established")
#Defining Color Pallete for markers
pal <- colorFactor(palette = c("red", "blue", "#9b4a11"),
levels = c("Public", "Private", "Medical College"))
#filtering data based on university type.
public <- filter(sylhet, Type == "Public")
private <- filter(sylhet, Type == "Private")
medical <- filter(sylhet, Type == "Medical College")
#funcion for generating label text
labelText <- function(Name, Type, Established){
paste0("<b>",Name,"</b>", "<br/>","Type: ", Type, "<br/>", "Established:", Established)
}
#note text
note <- tags$div(
HTML('<b>Public, Private Universities and Medical Colleges in Sylhet</b> <br>
Developed By: <a href = "https://www.linkedin.com/in/ovirahman">Musaddiqur Rahman Ovi </a> <br>
m.ovirahman2@gmail.com  <br>
Sources: Google, Wikipedia' )
)
#creating the leaflet map object
map <- leaflet() %>%
addProviderTiles("CartoDB") %>%
addCircleMarkers(data = public, radius = 12, label = ~Name,
popup = ~labelText(Name, Type, Established),
color = ~pal(Type), group = "Public") %>%
addCircleMarkers(data = private, radius = 12, label = ~Name,
popup = ~labelText(Name, Type, Established),
color = ~pal(Type), group = "Private") %>%
addCircleMarkers(data = medical, radius = 12, label = ~Name,
popup = ~labelText(Name, Type, Established),
color = ~pal(Type), group = "Medical College") %>%
addLegend(pal = pal,
values = c("Public", "Private", "Medical College"),position = "topleft") %>%
addLayersControl(overlayGroups = c("Public", "Private", "Medical College")) %>%
addControl(note, position = "bottomleft")
#plotting the map
map
#-----------------------------END----------------------------------
##***alternative method***
## using loop might be usefull when there are many categories / type
map <-leaflet() %>%
addProviderTiles("CartoDB")
for(i in c("Public", "Private", "Medical College")){
map <-  map %>%
addCircleMarkers(data = filter(sylhet, Type == i), radius = 12, label = ~Name,
popup = ~paste0("<b>",Name,"</b>", "<br/>", Type, "<br/>", "Established:", Established),
color = ~pal(Type), group = i)
}
map <- map %>%
addLegend(pal = pal,
values = c("Public", "Private", "Medical College"),position = "topleft") %>%
addLayersControl(overlayGroups = c("Public", "Private", "Medical College")) %>%
addControl(note, position = "bottomleft")
map
##############################
tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds")
map <- leaflet() %>%
addProviderTiles("CartoDB") %>%
addCircleMarkers(data = public, radius = 12, label = ~Name,
popup = ~labelText(Name, Type, Established),
color = ~pal(Type), group = "Public") %>%
addCircleMarkers(data = private, radius = 12, label = ~Name,
popup = ~labelText(Name, Type, Established),
color = ~pal(Type), group = "Private") %>%
addCircleMarkers(data = medical, radius = 12, label = ~Name,
popup = ~labelText(Name, Type, Established),
color = ~pal(Type), group = "Medical College") %>%
addLegend(pal = pal,
values = c("Public", "Private", "Medical College"),position = "topleft") %>%
addLayersControl(overlayGroups = c("Public", "Private", "Medical College")) %>%
addControl(note, position = "bottomleft")
#plotting the map
map
tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds")
tm_shape(mapanddata)
mapanddata
tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds", id = "ADM1_EN")
tmap_leaflet(tm_shape(map2) + tm_polygons("ADM4_EN",id = "ADM4_EN", legend.show = F))
tmap_leaflet(tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds", id = "ADM1_EN"))
#note text
note <- tags$div(
HTML('<b>Public, Private Universities and Medical Colleges in Sylhet</b> <br>
Developed By: <a href = "https://www.linkedin.com/in/ovirahman">Musaddiqur Rahman Ovi </a> <br>
m.ovirahman2@gmail.com  <br>
Sources: Google, Wikipedia' )
)
tags$div
tmap_leaflet(tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds", id = "ADM1_EN")) %>% addControl(note, position = "bottomleft")
tmap_leaflet(tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds", id = "ADM1_EN")) %>% addControl("source: wikipedia", position = "bottomleft")
tmap_leaflet(tm_shape(mapanddata) + tm_polygons("Density",palette = "Reds", id = "ADM1_EN")) %>% addControl("<b>Population Density</b><br>source: wikipedia", position = "bottomleft")
